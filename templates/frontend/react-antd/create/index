@{
	let name = ng.toCamelCase(model.name);
	let moduleName = `${name}Manage`;
    let pName = ng.toPascalCase(name);
    let arr = [];
    for(var i in model.inputs){
        arr.push(model.inputs[i]);
    }
}import React, { Component } from 'react';
import {
    Form@[antd]
} from 'antd';
import { connect } from 'dva';
@[const]
@[const]{}
@[requests]{
@:{
export async function get@(pName)(id) {
  return request(`/api/@(ng.toSnakeCase([model._modelName, ng.toSnakeCase(model.name, '-')], '/', true))/${id}`);
}
export async function save@(pName)(data) {
  return request('/api/@(ng.toSnakeCase([model._modelName, ng.toSnakeCase(model.name, '-')], '/', true))/save', {
    method: 'POST',
    data
  });
}@:}
}

class Create@(pName) extends Component {
    constructor(props) {
        super(props);
    }

    @[js]

    handleSubmit = e => {
        e.preventDefault();
        this.props.form.validateFields((err, values) => {
            if (err) return false;
            this.props.dispatch({
                type: '@(name)/submit',
                payload: {@(ng.include('for', {arr, template: 'frontend/react-antd/create/set-payload', split: ', '}))},
                callback: () => {
                    this.props.form.resetFields();
                }
            });
        });
    };

    handleCancel = e => {
        this.props.form.resetFields();
        this.props.dispatch({
            type: '@(name)/hide'
        });
    };

    render() {
        const { getFieldDecorator } = this.props.form;
        const { submitting } = this.props;
        const formItemLayout = {
            labelCol: { span: 8 },
            wrapperCol: { span: 16 }
        };

        return (
            <Modal
                title="@(model.display)"
                visible={this.props.isShown}
                onCancel={this.handleCancel}
                onOk={this.handleSubmit}
            >
                <Spin spinning={!!submitting}>
                    <Form className="form-order" layout="horizontal">
                        @(ng.include('for', {arr, template: 'frontend/react-antd/create/input'}))
                    </Form>
                </Spin>
            </Modal>
        );
    }
}

const WrappedCreate@(pName) = Form.create({ name: 'normal_create_@(ng.toSnakeCase(name))' })(Create@(pName));

export default connect(({ @(moduleName), loading }) => ({
    isShown: @(moduleName).isShown,
    submitting: loading.effects['@(moduleName)/submit']
}))(WrappedCreate@(pName));